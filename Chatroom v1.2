<div id="app">
  <div id="auth-container">
    <h2>Chat App</h2>
    <input type="text" id="username-input" placeholder="Username">
    <input type="password" id="password-input" placeholder="Password">
    <button id="login-button">Login</button>
    <button id="register-button">Register</button>
  </div>
  <div id="chat-container" style="display: none;">
    <div id="user-info"></div>
    <button id="logout-button">Logout</button>
    <button id="private-chat-button">Start Private Chat</button>
    <div id="messages"></div>
    <div class="input-area">
      <input type="text" id="message-input" placeholder="Type a message...">
      <button id="send-button">Send</button>
    </div>
  </div>
  <div id="private-chat-container" style="display: none;">
    <h2>Private Chat</h2>
    <select id="user-select"></select>
    <div id="private-messages"></div>
    <div class="input-area">
      <input type="text" id="private-message-input" placeholder="Type a private message...">
      <button id="send-private-button">Send</button>
    </div>
    <button id="back-to-main-chat">Back to Main Chat</button>
  </div>
</div>
body {
  font-family: Arial, sans-serif;
  margin: 0;
  padding: 20px;
  background-color: #f0f0f0;
}

#app {
  max-width: 600px;
  margin: 0 auto;
  background-color: white;
  border-radius: 10px;
  box-shadow: 0 0 10px rgba(0,0,0,0.1);
  padding: 20px;
}

input, button, select {
  width: 100%;
  padding: 10px;
  margin-bottom: 10px;
  box-sizing: border-box;
}

button {
  background-color: #4CAF50;
  color: white;
  border: none;
  cursor: pointer;
}

button:hover {
  background-color: #45a049;
}

#messages, #private-messages {
  height: 300px;
  overflow-y: auto;
  border: 1px solid #ddd;
  padding: 10px;
  margin-bottom: 10px;
}

.message {
  background-color: #f1f1f1;
  padding: 10px;
  margin-bottom: 10px;
  border-radius: 5px;
}

.reaction-button {
  background: none;
  border: none;
  font-size: 1.2em;
  cursor: pointer;
  padding: 5px;
}

.reaction-button.reacted {
  opacity: 0.5;
  cursor: not-allowed;
}
const db = {
  users: {},
  messages: [],
  privateMessages: {},
  currentUser: null,

  register(username, password) {
    if (this.users[username]) return false;
    this.users[username] = { password };
    return true;
  },

  login(username, password) {
    if (this.users[username] && this.users[username].password === password) {
      this.currentUser = username;
      return true;
    }
    return false;
  },

  logout() {
    this.currentUser = null;
  },

  addMessage(message) {
    this.messages.push({...message, id: Date.now().toString()});
  },

  reactToMessage(id, reaction, user) {
    const message = this.messages.find(m => m.id === id);
    if (message && (!message.reactions || !message.reactions[user])) {
      if (!message.reactions) message.reactions = {};
      message.reactions[user] = reaction;
    }
  },

  addPrivateMessage(from, to, text) {
    const id = `${from}-${to}`;
    if (!this.privateMessages[id]) this.privateMessages[id] = [];
    this.privateMessages[id].push({ from, text, timestamp: new Date() });
  },

  getPrivateMessages(user1, user2) {
    const id1 = `${user1}-${user2}`, id2 = `${user2}-${user1}`;
    return [...(this.privateMessages[id1] || []), ...(this.privateMessages[id2] || [])]
      .sort((a, b) => a.timestamp - b.timestamp);
  }
};

function showChat() {
  document.getElementById('auth-container').style.display = 'none';
  document.getElementById('chat-container').style.display = 'block';
  document.getElementById('private-chat-container').style.display = 'none';
  document.getElementById('user-info').textContent = `Logged in as: ${db.currentUser}`;
  renderMessages();
}

function showAuth() {
  document.getElementById('auth-container').style.display = 'block';
  document.getElementById('chat-container').style.display = 'none';
  document.getElementById('private-chat-container').style.display = 'none';
}

function showPrivateChat() {
  document.getElementById('auth-container').style.display = 'none';
  document.getElementById('chat-container').style.display = 'none';
  document.getElementById('private-chat-container').style.display = 'block';
  const userSelect = document.getElementById('user-select');
  userSelect.innerHTML = '<option value="">Select a user</option>';
  Object.keys(db.users).forEach(user => {
    if (user !== db.currentUser) {
      const option = document.createElement('option');
      option.value = user;
      option.textContent = user;
      userSelect.appendChild(option);
    }
  });
}

function sendMessage() {
  const messageInput = document.getElementById('message-input');
  const message = messageInput.value.trim();
  if (message) {
    db.addMessage({ text: message, user: db.currentUser, timestamp: new Date() });
    messageInput.value = '';
    renderMessages();
  }
}

function reactToMessage(messageId, reaction) {
  db.reactToMessage(messageId, reaction, db.currentUser);
  renderMessages();
}

function renderMessages() {
  const messagesDiv = document.getElementById('messages');
  messagesDiv.innerHTML = '';
  db.messages.forEach(message => {
    const messageElement = document.createElement('div');
    messageElement.className = 'message';
    const reactions = message.reactions || {};
    const reactionCounts = { 'üëç': 0, '‚ù§Ô∏è': 0 };
    Object.values(reactions).forEach(r => reactionCounts[r]++);
    messageElement.innerHTML = `
      <strong>${message.user}:</strong> ${message.text}
      <br>
      <button class="reaction-button ${reactions[db.currentUser] === 'üëç' ? 'reacted' : ''}" onclick="reactToMessage('${message.id}', 'üëç')">üëç ${reactionCounts['üëç']}</button>
      <button class="reaction-button ${reactions[db.currentUser] === '‚ù§Ô∏è' ? 'reacted' : ''}" onclick="reactToMessage('${message.id}', '‚ù§Ô∏è')">‚ù§Ô∏è ${reactionCounts['‚ù§Ô∏è']}</button>
    `;
    messagesDiv.appendChild(messageElement);
  });
  messagesDiv.scrollTop = messagesDiv.scrollHeight;
}

function sendPrivateMessage() {
  const messageInput = document.getElementById('private-message-input');
  const message = messageInput.value.trim();
  const recipient = document.getElementById('user-select').value;
  if (message && recipient) {
    db.addPrivateMessage(db.currentUser, recipient, message);
    messageInput.value = '';
    renderPrivateMessages(recipient);
  }
}

function renderPrivateMessages(recipient) {
  const messagesDiv = document.getElementById('private-messages');
  messagesDiv.innerHTML = '';
  const messages = db.getPrivateMessages(db.currentUser, recipient);
  messages.forEach(message => {
    const messageElement = document.createElement('div');
    messageElement.className = 'message';
    messageElement.innerHTML = `<strong>${message.from}:</strong> ${message.text}`;
    messagesDiv.appendChild(messageElement);
  });
  messagesDiv.scrollTop = messagesDiv.scrollHeight;
}

// Event Listeners
document.getElementById('register-button').addEventListener('click', function() {
  const username = document.getElementById('username-input').value;
  const password = document.getElementById('password-input').value;
  if (db.register(username, password)) {
    alert('Registration successful. Please login.');
  } else {
    alert('Username already exists.');
  }
});

document.getElementById('login-button').addEventListener('click', function() {
  const username = document.getElementById('username-input').value;
  const password = document.getElementById('password-input').value;
  if (db.login(username, password)) {
    showChat();
  } else {
    alert('Invalid username or password.');
  }
});

document.getElementById('logout-button').addEventListener('click', function() {
  db.logout();
  showAuth();
});

document.getElementById('private-chat-button').addEventListener('click', showPrivateChat);

document.getElementById('user-select').addEventListener('change', function() {
  const recipient = this.value;
  if (recipient) {
    renderPrivateMessages(recipient);
  }
});

document.getElementById('send-button').addEventListener('click', sendMessage);
document.getElementById('message-input').addEventListener('keypress', function(e) {
  if (e.key === 'Enter') sendMessage();
});

document.getElementById('send-private-button').addEventListener('click', sendPrivateMessage);
document.getElementById('private-message-input').addEventListener('keypress', function(e) {
  if (e.key === 'Enter') sendPrivateMessage();
});

document.getElementById('back-to-main-chat').addEventListener('click', showChat);

// Initialize
showAuth();
